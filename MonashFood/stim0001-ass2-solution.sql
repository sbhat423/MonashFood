-- TASK 1 DATA DEFINITION
-- ======================

-- TASK 1.1

CREATE TABLE FS_DINER (
	DINER_NO 			NUMBER(8) NOT NULL,
	FOOD_ITEM_NO		NUMBER(4) NOT NULL,
	FOOD_SERVE_SIZE		CHAR(2 BYTE) NOT NULL,
	FS_DINER_NO_SERVES	NUMBER(1) NOT NULL,
	FS_DINER_ITEM_SERVED CHAR(1) NOT NULL
);

COMMENT ON COLUMN FS_DINER.FS_DINER_NO_SERVES IS
	'NUMBER OF SERVES ORDERED';

COMMENT ON COLUMN FS_DINER.FS_DINER_ITEM_SERVED IS
	'STATE OF THE ITEM - IS ITEM SERVED OR ORDERED (O/S)';

ALTER TABLE FS_DINER ADD CONSTRAINT FS_DINER_PK PRIMARY KEY ( DINER_NO, FOOD_ITEM_NO, FOOD_SERVE_SIZE);

ALTER TABLE FS_DINER
	ADD CONSTRAINT FS_DINER_DINER_FK FOREIGN KEY ( DINER_NO )
		REFERENCES DINER ( DINER_NO )
	NOT DEFERRABLE;
	
ALTER TABLE FS_DINER
	ADD CONSTRAINT FS_DINER_FOOD_SERVE_FK FOREIGN KEY ( FOOD_ITEM_NO, FOOD_SERVE_SIZE )
		REFERENCES FOOD_SERVE ( FOOD_ITEM_NO, FOOD_SERVE_SIZE )
	NOT DEFERRABLE;



    
-- TASK 1.2
-- DROP TABLE STATEMENTS
-- HERE YOU MUST NOT USE CASCADE CONSTRAINTS

DROP TABLE FS_DINER;

DROP TABLE FS_DINER_HISTORY;

DROP TABLE DINER;

DROP TABLE DINER_HISTORY;

DROP TABLE PERSONAL_INFO;

DROP TABLE FOOD_SERVE;

DROP TABLE TABLE_DETAILS;

DROP TABLE BEVERAGE;

DROP TABLE ENTREE;

DROP TABLE MAIN;

DROP TABLE DESSERT;

DROP TABLE FOODITEM;



-- TASK 2 DATA MANIPULATION
-- ========================

-- TASK 2.1
-- ADD TO YOUR DATABASE FOUR DINER RECORDS AND THEIR ASSOCIATED FS_DINER RECORDS


INSERT INTO DINER VALUES ( 1, 0, 1, TO_DATE('2017-05-01 21:15:32', 'YYYY-MM-DD HH24:MI:SS'), NULL, 1);

COMMIT;


INSERT INTO FS_DINER VALUES ( 1, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Arancini Balls'), 'ST', 1, 'O' );
INSERT INTO FS_DINER VALUES ( 1, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Braised Beef Brisket'), 'ST', 1, 'O');
INSERT INTO FS_DINER VALUES ( 1, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Corona Beer'), 'ST', 2, 'O');
INSERT INTO FS_DINER VALUES ( 1, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Sticky Date Pudding'), 'ST', 1, 'O');

COMMIT;


UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 1 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'ST')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'Arancini Balls'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 1
AND DINER_COMPLETED IS NULL;

UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 1 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Arancini Balls')
AND FOOD_SERVE_SIZE = 'ST';

COMMIT;


UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 1 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'ST')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'Braised Beef Brisket'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 1
AND DINER_COMPLETED IS NULL;

UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 1 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Braised Beef Brisket')
AND FOOD_SERVE_SIZE = 'ST';

COMMIT;


UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 1 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'ST')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'Corona Beer'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 1
AND DINER_COMPLETED IS NULL;

UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 1 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Corona Beer')
AND FOOD_SERVE_SIZE = 'ST';

COMMIT;


UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 1 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'ST')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'Sticky Date Pudding'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 1
AND DINER_COMPLETED IS NULL;


UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 1 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Sticky Date Pudding')
AND FOOD_SERVE_SIZE = 'ST';

COMMIT;


UPDATE DINER 
SET DINER_COMPLETED = TO_DATE('2017-05-01 22:05:23', 'YYYY-MM-DD HH24:MI:SS')
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 1
AND DINER_COMPLETED IS NULL;

COMMIT;


INSERT INTO DINER VALUES ( 2, 0, 3, TO_DATE('2017-05-02 20:45:38', 'YYYY-MM-DD HH24:MI:SS'), NULL, 1);

COMMIT;


INSERT INTO FS_DINER VALUES ( 2, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Beef Carpaccio'), 'ST', 1, 'O' );
INSERT INTO FS_DINER VALUES ( 2, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Ravioli Ricotta'), 'ST', 1, 'O');
INSERT INTO FS_DINER VALUES ( 2, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'House White (Glass)'), 'ST', 1, 'O');
INSERT INTO FS_DINER VALUES ( 2, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Classic Chocolate Mousse'), 'ST', 1, 'O');

COMMIT;


UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 3 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'ST')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'Beef Carpaccio'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 3
AND DINER_COMPLETED IS NULL;

UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 3 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Beef Carpaccio')
AND FOOD_SERVE_SIZE = 'ST';

COMMIT;


UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 3 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'ST')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'Ravioli Ricotta'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 3
AND DINER_COMPLETED IS NULL;

UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 3 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Ravioli Ricotta')
AND FOOD_SERVE_SIZE = 'ST';

COMMIT;


UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 3 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'ST')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'House White (Glass)'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 3
AND DINER_COMPLETED IS NULL;

UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 3 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'House White (Glass)')
AND FOOD_SERVE_SIZE = 'ST';

COMMIT;


UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 3 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'ST')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'Classic Chocolate Mousse'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 3
AND DINER_COMPLETED IS NULL;

UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 3 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Classic Chocolate Mousse')
AND FOOD_SERVE_SIZE = 'ST';

COMMIT;


UPDATE DINER 
SET DINER_COMPLETED = TO_DATE('2017-05-02 22:00:56', 'YYYY-MM-DD HH24:MI:SS')
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 3
AND DINER_COMPLETED IS NULL;

COMMIT;


INSERT INTO DINER VALUES ( 3, 0, 2, TO_DATE('2017-05-03 21:15:05', 'YYYY-MM-DD HH24:MI:SS'), NULL, 1);

COMMIT;


INSERT INTO FS_DINER VALUES ( 3, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Arancini Balls'), 'ST', 1, 'O' );
INSERT INTO FS_DINER VALUES ( 3, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Corona Beer'), 'ST', 1, 'O');

COMMIT;


UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 2 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'ST')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'Arancini Balls'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 2
AND DINER_COMPLETED IS NULL;

UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 2 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Arancini Balls')
AND FOOD_SERVE_SIZE = 'ST';

COMMIT;


UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 2 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'ST')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'Corona Beer'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 2
AND DINER_COMPLETED IS NULL;

UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 2 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Corona Beer')
AND FOOD_SERVE_SIZE = 'ST';

COMMIT;


UPDATE DINER 
SET DINER_COMPLETED = TO_DATE('2017-05-03 22:20:25', 'YYYY-MM-DD HH24:MI:SS')
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 2
AND DINER_COMPLETED IS NULL;

COMMIT;


INSERT INTO DINER VALUES ( 4, 0, 2, TO_DATE('2017-05-04 21:05:05', 'YYYY-MM-DD HH24:MI:SS'), NULL, 1);

COMMIT;


INSERT INTO FS_DINER VALUES ( 4, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Bruschetta'), 'ST', 1, 'O' );
INSERT INTO FS_DINER VALUES ( 4, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Braised Beef Brisket'), 'LG', 1, 'O');
INSERT INTO FS_DINER VALUES ( 4, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Sticky Date Pudding'), 'ST', 1, 'O');

COMMIT;


UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 2 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'ST')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'Bruschetta'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 2
AND DINER_COMPLETED IS NULL;

UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 2 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Bruschetta')
AND FOOD_SERVE_SIZE = 'ST';

COMMIT;

UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 2 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'LG')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'Braised Beef Brisket'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 2
AND DINER_COMPLETED IS NULL;

UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 2 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Braised Beef Brisket')
AND FOOD_SERVE_SIZE = 'LG';

COMMIT;


UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 2 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'ST')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'Sticky Date Pudding'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 2
AND DINER_COMPLETED IS NULL;

UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 2 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Sticky Date Pudding')
AND FOOD_SERVE_SIZE = 'ST';

COMMIT;


UPDATE DINER 
SET DINER_COMPLETED = TO_DATE('2017-05-04 22:10:25', 'YYYY-MM-DD HH24:MI:SS')
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 2
AND DINER_COMPLETED IS NULL;

COMMIT;


-- TASK 2.2
-- PROVIDE THE CREATE SEQUENCE COMMANDS TO BE USED FOR PRIMARY KEY VALES WHEN ADDING 
-- FOOD ITEMS AND DINERS TO THE SYSTEM. 
-- - THE FOOD ITEM SEQUENCE SHOULD START AT 11 AND INCREMENT BY 1
-- - THE DINER SEQUENCE SHOULD START AT 10 AND INCREMENT BY 1

CREATE SEQUENCE FOOD_ITEM_NO_SEQ
  START WITH 11
  INCREMENT BY 1;

CREATE SEQUENCE DINER_NO_SEQ
  START WITH 10
  INCREMENT BY 1;


-- TASK 2.3    
--  PROVIDE THE DROP SEQUENCE STATEMENTS FOR THE TWO SEQUENCES YOU CREATED IN  Q2.1 

DROP SEQUENCE FOOD_ITEM_NO_SEQ;

DROP SEQUENCE DINER_NO_SEQ;


-- TASK 3 DATABASE INSERT/UPDATES
-- ==============================

-- SEQUENCES CREATED IN TASK 2.2 MUST BE USED IN THIS TASK FOR THE ADDING PRIMARY KEYS.

-- TASK 3.1
--  ADD A NEW DESSERT TO THE MONASH FOOD MENU - YOU WILL NEED TO RESEARCH SOME
-- MEANINGFUL DATA TO BE ABLE TO ADD THIS ITEM.  DESSERT'S ARE FOOD_TYPE 'D' AND ARE 
-- ONLY SERVED IN STANDARD 'ST' SERVE SIZES.

INSERT INTO FOODITEM VALUES ( FOOD_ITEM_NO_SEQ.NEXTVAL, 'Brownie', 'Brownie with hot chocolate fudge', 'D');

INSERT INTO FOOD_SERVE VALUES ( FOOD_ITEM_NO_SEQ.CURRVAL, 'ST', 468,10 );

INSERT INTO DESSERT VALUES (FOOD_ITEM_NO_SEQ.CURRVAL, 'N');

COMMIT;


-- TASK 3.2
-- MONASH FOOD HAS DECIDED TO INCREASE THE PRICE CHARGED FOR ALL STANDARD SERVE  
-- ('ST') MAIN FOOD ITEMS ('M' FOOD TYPE) BY 15%, MAKE THIS CHANGE IN THE DATABASE

UPDATE FOOD_SERVE
SET FOOD_SERVE_COST = FOOD_SERVE_COST * 1.15
WHERE FOOD_SERVE_SIZE = 'ST'
AND FOOD_ITEM_NO IN (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_TYPE = 'M');

COMMIT;


-- TASK 3.3 DINER ACTIVITY

-- TASK 3.3 (A) A NEW DINER HAS JUST ARRIVED AND BEEN SEATED AT TABLE 1 SEAT 3. UPDATE THE  
-- DATABASE TO SEAT THIS DINER

INSERT INTO DINER VALUES ( DINER_NO_SEQ.NEXTVAL, 0, 3, SYSDATE, NULL, 1);

COMMIT;


-- TASK 3.3 (B) THIS NEW DINER CALLS THE WAITER OVER AND PROCEEDS TO ORDER TWO 'BRUSCHETTA' 
-- ENTREES. ENTREES ARE ONLY AVAILABLE IN A STANDARD 'ST' SIZE. ADD THIS DATA TO THE 
-- MONASH FOOD SYSTEM FOR THIS DINER. THE FOOD ITEM HAS NOT BEEN SERVED AS YET, THIS IS 
-- AN ORDER ONLY

INSERT INTO FS_DINER VALUES ( DINER_NO_SEQ.CURRVAL, (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Bruschetta'), 'ST', 2, 'O' );

COMMIT;


-- TASK 3.3 (C) SOME TIME AFTER THIS ORDER HAS BEEN RECORDED THE 'BRUSCHETTA' ARE SERVED TO 
-- THIS DINER - UPDATE THE DATABASE TO RECORD THIS SERVICE. 

UPDATE DINER
SET DINER_PAYMENT_DUE = DINER_PAYMENT_DUE + (SELECT FS.FOOD_SERVE_COST * FSD.FS_DINER_NO_SERVES FROM DINER D
JOIN FS_DINER FSD ON (FSD.DINER_NO = D.DINER_NO AND D.TABLE_NO = 1 AND D.DINER_SEAT_NO = 3 AND D.DINER_COMPLETED IS NULL)
JOIN FOOD_SERVE FS ON (FS.FOOD_ITEM_NO = FSD.FOOD_ITEM_NO AND FS.FOOD_SERVE_SIZE = 'ST')
JOIN FOODITEM F ON (FS.FOOD_ITEM_NO = F.FOOD_ITEM_NO AND F.FOOD_NAME = 'Bruschetta'))
WHERE TABLE_NO = 1
AND DINER_SEAT_NO = 3
AND DINER_COMPLETED IS NULL;

UPDATE FS_DINER
SET FS_DINER_ITEM_SERVED = 'S'
WHERE DINER_NO = (SELECT DINER_NO FROM DINER WHERE TABLE_NO = 1 AND DINER_SEAT_NO = 3 AND DINER_COMPLETED IS NULL)
AND FOOD_ITEM_NO = (SELECT FOOD_ITEM_NO FROM FOODITEM WHERE FOOD_NAME = 'Bruschetta')
AND FOOD_SERVE_SIZE = 'ST';

COMMIT;


-- TASK 4 DATABASE STRUCTURE
-- =========================
-- TASK 4.1 COLLECTION OF DINER INFORMATION

CREATE TABLE PERSONAL_INFO(
      PERSONAL_INFO_NO    NUMBER(8) NOT NULL,
      FIRST_NAME  VARCHAR(50) NOT NULL,
      LAST_NAME   VARCHAR(50) NOT NULL,
      MOBILE_NO   NUMBER(10) NOT NULL,
      EMAIL       VARCHAR(50) NOT NULL
);

ALTER TABLE PERSONAL_INFO ADD CONSTRAINT PERSONAL_INFO_PK PRIMARY KEY ( PERSONAL_INFO_NO );

ALTER TABLE DINER 
ADD (
		PERSONAL_INFO_NO NUMBER(8)
	);
	

ALTER TABLE DINER 
ADD CONSTRAINT DINER_PERSONAL_INFO_FK FOREIGN KEY ( PERSONAL_INFO_NO )
REFERENCES PERSONAL_INFO ( PERSONAL_INFO_NO );

-- TASK 4.2 END OF FINANCIAL YEAR DINER AND FS_DINER ARCHIVE

CREATE TABLE FS_DINER_HISTORY (
	DINER_NO 			NUMBER(8) NOT NULL,
	FOOD_ITEM_NO		NUMBER(4) NOT NULL,
	FOOD_SERVE_SIZE		CHAR(2 BYTE) NOT NULL,
	FS_DINER_NO_SERVES	NUMBER(1) NOT NULL,
	FS_DINER_ITEM_SERVED CHAR(1) NOT NULL
);

ALTER TABLE FS_DINER_HISTORY ADD CONSTRAINT FS_DINER_HISTORY_PK PRIMARY KEY ( DINER_NO, FOOD_ITEM_NO, FOOD_SERVE_SIZE);

ALTER TABLE FS_DINER_HISTORY
	ADD CONSTRAINT FS_DINER_HISTORY_FOOD_SERVE_FK FOREIGN KEY ( FOOD_ITEM_NO, FOOD_SERVE_SIZE )
		REFERENCES FOOD_SERVE ( FOOD_ITEM_NO, FOOD_SERVE_SIZE )
	NOT DEFERRABLE;


CREATE TABLE DINER_HISTORY (
    DINER_NO            NUMBER(8) NOT NULL,
    DINER_PAYMENT_DUE   NUMBER(6,2) NOT NULL,
    DINER_SEATED        DATE NOT NULL,
    DINER_COMPLETED     DATE,
	PERSONAL_INFO_NO	NUMBER(8)
);

ALTER TABLE DINER_HISTORY ADD CONSTRAINT DINER_HISTORY_PK PRIMARY KEY ( DINER_NO );


ALTER TABLE FS_DINER_HISTORY
	ADD CONSTRAINT FS_DINER_HISTORY_DINER_FK FOREIGN KEY ( DINER_NO )
		REFERENCES DINER_HISTORY ( DINER_NO )
	NOT DEFERRABLE;
	
ALTER TABLE DINER_HISTORY
	ADD CONSTRAINT FS_DINER_HISTORY_PERSONAL_INFO FOREIGN KEY ( PERSONAL_INFO_NO )
		REFERENCES PERSONAL_INFO ( PERSONAL_INFO_NO )
	NOT DEFERRABLE;

INSERT INTO DINER_HISTORY
(
	SELECT DINER_NO, DINER_PAYMENT_DUE, DINER_SEATED, DINER_COMPLETED, PERSONAL_INFO_NO
	FROM DINER
	WHERE DINER_COMPLETED < (SELECT ADD_MONTHS(TRUNC (SYSDATE ,'YEAR'),6) FROM DUAL)
);

COMMIT;


INSERT INTO FS_DINER_HISTORY
(
  SELECT * FROM FS_DINER
  WHERE DINER_NO IN (SELECT DINER_NO FROM DINER_HISTORY)
);

COMMIT;


DELETE FROM FS_DINER 
WHERE DINER_NO IN (SELECT DINER_NO FROM DINER_HISTORY);

COMMIT;


DELETE FROM DINER
WHERE DINER_COMPLETED < (SELECT ADD_MONTHS(TRUNC (SYSDATE ,'YEAR'),6) FROM DUAL);

COMMIT;


--========================= END OF ASS2-SOLUTION.SQL ==================================
